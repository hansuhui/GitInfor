https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%ED%83%9C%EA%B7%B8

[태그]

다른 VCS처럼 Git도 태그를 지원한다. 사람들은 보통 릴리즈할 때 사용한다(v1.0, 등등). 
이번에는 태그를 조회하고 생성하는 법과 태그의 종류를 설명한다.

[태그 조회하기]

우선 git tag 명령으로 이미 만들어진 태그가 있는지 확인할 수 있다:

$ git tag
v0.1
v1.3

이 명령은 알파벳 순서로 태그를 보여준다. 
사실 순서는 별로 중요한 게 아니다.

검색 패턴을 사용하여 태그를 검색할 수 있다. 
Git 소스 저장소는 240여 개의 태그가 있다. 
만약 1.4.2 버전의 태그들만 검색하고 싶으면 아래와 같이 실행한다:

$ git tag -l 'v1.4.2.*'
v1.4.2.1
v1.4.2.2
v1.4.2.3
v1.4.2.4


[태그 붙이기]

Git의 태그는 Lightweight 태그와 Annotated 태그로 두 종류가 있다. 
Lightweight 태그는 브랜치와 비슷한데 브랜치처럼 가리키는 지점을 최신 커밋으로 이동시키지 않는다. 

단순히 특정 커밋에 대한 포인터일 뿐이다. 
한편, Annotated 태그는 Git 데이터베이스에 태그를 만든 사람의 
이름, 이메일과 태그를 만든 날짜, 그리고 태그 메시지도 저장한다. 
또 GPG(GNU Privacy Guard)로 서명할 수도 있다. 

이 모든 정보를 저장해둬야 할 때에만 Annotated 태그를 추천한다. 
그냥 다른 정보를 저장하지 않는 단순한 태그가 필요하다면 Lightweight 태그를 사용하는 것이 좋다.


[Annotated 태그]

Annotated 태그를 만드는 방법은 간단하다. tag 명령을 실행할 때 -a 옵션을 추가한다:

$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4

-m 옵션으로 태그를 저장할 때 메시지를 함께 저장할 수 있다. 
명령을 실행할 때 메시지를 입력하지 않으면 Git은 편집기를 실행시킨다.

git show 명령으로 태그 정보와 커밋 정보를 모두 확인할 수 있다:

$ git show v1.4
tag v1.4
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 14:45:11 2009 -0800

my version 1.4

commit 15027957951b64cf874c3557a0f3547bd83b3ff6
Merge: 4a447f7... a6b4c97...
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sun Feb 8 19:02:46 2009 -0800

    Merge branch 'experiment'


커밋 정보를 보여주기 전에 먼저 태그를 만든 사람이 누구인지, 
언제 태그를 만들었는지, 그리고 태그 메시지가 무엇인지 보여준다.


[태그에 서명하기]

GPG 개인키가 있으면 태그에 서명할 수 있다. 이때에는 -a옵션 대신 -s를 사용한다:

$ git tag -s v1.5 -m 'my signed 1.5 tag'
You need a passphrase to unlock the secret key for
user: "Scott Chacon <schacon@gee-mail.com>"
1024-bit DSA key, ID F721C45A, created 2009-02-09

이 태그에 git show를 실행하면 GPG 서명도 볼 수 있다:

$ git show v1.5
tag v1.5
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:22:20 2009 -0800

my signed 1.5 tag
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.8 (Darwin)

iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN
Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/
=WryJ
-----END PGP SIGNATURE-----
commit 15027957951b64cf874c3557a0f3547bd83b3ff6
Merge: 4a447f7... a6b4c97...
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sun Feb 8 19:02:46 2009 -0800

    Merge branch 'experiment'

잠시 후에 서명한 태그를 검증하는 방법도 설명한다.


[Lightweight 태그]

Lightweight 태그는 기본적으로 파일에 커밋 체크섬을 저장하는 것뿐이다. 
다른 정보는 저장하지 않는다. Lightweight 태그를 만들 때에는 -a, -s, -m 옵션을 사용하지 않는다:

$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5

이 태그에 git show를 실행하면 별도의 태그 정보를 확인할 수 없다. 
이 명령은 단순히 커밋 정보만을 보여준다:

$ git show v1.4-lw
commit 15027957951b64cf874c3557a0f3547bd83b3ff6
Merge: 4a447f7... a6b4c97...
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sun Feb 8 19:02:46 2009 -0800

    Merge branch 'experiment'


[태그 검증하기]

git tag -v [태그 이름] 명령으로 서명한 태그를 검증한다. 
이 명령은 GPG를 사용하여 서명을 검증한다. 그래서 서명자의 GPG 공개키가 필요하다. 
이 공개키가 Keyring에 있어야만 이 명령이 성공적으로 실행된다:

$ git tag -v v1.4.2.1
object 883653babd8ee7ea23e6a5c392bb739348b1eb61
type commit
tag v1.4.2.1
tagger Junio C Hamano <junkio@cox.net> 1158138501 -0700

GIT 1.4.2.1

Minor fixes since 1.4.2, including git-mv and git-http with alternates.
gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
gpg: Good signature from "Junio C Hamano <junkio@cox.net>"
gpg:                 aka "[jpeg image of size 1513]"
Primary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A

만약 서명자의 공개키가 없으면 아래와 같은 메시지를 출력한다:

gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
gpg: Can't check signature: public key not found
error: could not verify the tag 'v1.4.2.1'


[나중에 태그하기]

예전 커밋에 대해서도 태그할 수 있다. 커밋 히스토리는 아래와 같고:

$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme

"updated rakefile" 커밋을 v1.2로 태그하지 못했다고 해도 차후에 태그를 붙일 수 있다. 
특정 커밋에 태그하기 위해서 명령의 끝에 커밋 체크섬을 명시한다
(긴 체크섬을 전부 사용할 필요는 없다):

$ git tag -a v1.2 -m 'version 1.2' 9fceb02

이제 아래와 같이 만든 태그를 확인한다:

$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...

[태그 공유하기]

git push 명령은 자동으로 리모트 서버에 태그를 전송하지 않는다. 
태그를 만들었으면 서버에 별도로 Push해야 한다. 

브랜치를 공유하는 것과 같은 방법으로 할 수 있다. 
git push origin [태그 이름]을 실행한다:

$ git push origin v1.5
Counting objects: 50, done.
Compressing objects: 100% (38/38), done.
Writing objects: 100% (44/44), 4.56 KiB, done.
Total 44 (delta 18), reused 8 (delta 1)
To git@github.com:schacon/simplegit.git
* [new tag]         v1.5 -> v1.5

만약 한 번에 태그를 여러 개 Push하고 싶으면 --tags 옵션을 추가하여 git push명령을 실행한다. 
이 명령으로 리모트 서버에 없는 태그를 모두 전송할 수 있다:

$ git push origin --tags
Counting objects: 50, done.
Compressing objects: 100% (38/38), done.
Writing objects: 100% (44/44), 4.56 KiB, done.
Total 44 (delta 18), reused 8 (delta 1)
To git@github.com:schacon/simplegit.git
 * [new tag]         v0.1 -> v0.1
 * [new tag]         v1.2 -> v1.2
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
 * [new tag]         v1.5 -> v1.5

누군가 저장소에서 Clone하거나 Pull을 하면 모든 태그 정보도 함께 전송된다.





